/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.multichat;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.JTextPane;

/**
 *
 * @author time0
 */
public class ChatPanel extends javax.swing.JPanel implements Runnable {

    /**
     * Creates new form Panel
     */
    public ChatPanel(Socket s, String sender, String receiver) {
        initComponents();
	socket = s;
	this.sender = sender;
	this.receiver = receiver;
        try {
            bf = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            os = new DataOutputStream(socket.getOutputStream());
            (new Thread(this)).start();
        } catch (IOException ex) {
            System.out.println("Error while create Panel");
//            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelChatBar = new javax.swing.JPanel();
        jPanelSend = new javax.swing.JPanel();
        jLabelSend = new javax.swing.JLabel();
        jScrollPaneInput = new javax.swing.JScrollPane();
        jTextPaneInput = new javax.swing.JTextPane();
        jScrollPaneChatHistory = new javax.swing.JScrollPane();
        jTextAreaChattingHistory = new javax.swing.JTextArea();
        jLabelChattingHistory = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(500, 440));

        jPanelChatBar.setBackground(new java.awt.Color(51, 153, 255));

        jPanelSend.setBackground(new java.awt.Color(0, 102, 204));
        jPanelSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buttonsendMessage(evt);
            }
        });

        jLabelSend.setForeground(new java.awt.Color(255, 255, 255));
        jLabelSend.setText("Send");

        javax.swing.GroupLayout jPanelSendLayout = new javax.swing.GroupLayout(jPanelSend);
        jPanelSend.setLayout(jPanelSendLayout);
        jPanelSendLayout.setHorizontalGroup(
            jPanelSendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSendLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSend)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelSendLayout.setVerticalGroup(
            jPanelSendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSendLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSend, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPaneInput.setViewportView(jTextPaneInput);

        javax.swing.GroupLayout jPanelChatBarLayout = new javax.swing.GroupLayout(jPanelChatBar);
        jPanelChatBar.setLayout(jPanelChatBarLayout);
        jPanelChatBarLayout.setHorizontalGroup(
            jPanelChatBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChatBarLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPaneInput, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jPanelSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelChatBarLayout.setVerticalGroup(
            jPanelChatBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChatBarLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPaneInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanelSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jTextAreaChattingHistory.setEditable(false);
        jTextAreaChattingHistory.setBackground(new java.awt.Color(235, 255, 255));
        jTextAreaChattingHistory.setColumns(20);
        jTextAreaChattingHistory.setRows(5);
        jScrollPaneChatHistory.setViewportView(jTextAreaChattingHistory);

        jLabelChattingHistory.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelChattingHistory.setText("Chatting History ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(jLabelChattingHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPaneChatHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanelChatBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabelChattingHistory)
                .addGap(8, 8, 8)
                .addComponent(jScrollPaneChatHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelChatBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonsendMessage(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonsendMessage
        if (jTextPaneInput.getText().isEmpty()) return;
            try {
                os.writeBytes(sender + ": " + jTextPaneInput.getText() + "\n");
                os.flush();
                jTextAreaChattingHistory.append(sender + ": " + jTextPaneInput.getText() + "\n");
                jTextPaneInput.setText("");
            } catch (Exception e) {
                System.out.println("Error while sendding messeger");
            }
    }//GEN-LAST:event_buttonsendMessage


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelChattingHistory;
    private javax.swing.JLabel jLabelSend;
    private javax.swing.JPanel jPanelChatBar;
    private javax.swing.JPanel jPanelSend;
    private javax.swing.JScrollPane jScrollPaneChatHistory;
    private javax.swing.JScrollPane jScrollPaneInput;
    private javax.swing.JTextArea jTextAreaChattingHistory;
    private javax.swing.JTextPane jTextPaneInput;
    // End of variables declaration//GEN-END:variables
    private static final long serialVersionUID = 1L;
    Socket socket = null;
    String sender;
    String receiver;
    BufferedReader bf = null;
    DataOutputStream os = null;
    
    @Override
    public void run() {
        while (true) {
	    try {
		if (socket != null) {
		    String msg;
		    while ((msg = bf.readLine()) != null) {
			// Nếu có tin nhắn đến thì ghi vào lịch sử
			jTextAreaChattingHistory.append(msg + "\n");
		    }
		}
	    } catch (Exception e) {
		// Do not change this because it spawn try-catch many time while running thread!
	    }
	}
    }
}
